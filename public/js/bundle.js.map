{
  "version": 3,
  "sources": ["../../js/main.js"],
  "sourcesContent": ["document.addEventListener('DOMContentLoaded', async function() {\n  // Dark Mode Toggle\n  const darkModeToggle = document.getElementById('darkModeToggle');\n  const darkIcon = document.getElementById('theme-toggle-dark-icon');\n  const lightIcon = document.getElementById('theme-toggle-light-icon');\n\n  const applyTheme = (isDark) => {\n    if (isDark) {\n      document.documentElement.classList.add('dark');\n      if (darkIcon) darkIcon.classList.remove('hidden');\n      if (lightIcon) lightIcon.classList.add('hidden');\n    } else {\n      document.documentElement.classList.remove('dark');\n      if (darkIcon) darkIcon.classList.add('hidden');\n      if (lightIcon) lightIcon.classList.remove('hidden');\n    }\n  };\n\n  // Initialize theme based on localStorage or system preference\n  let darkMode = localStorage.getItem('darkMode') \n    ? JSON.parse(localStorage.getItem('darkMode'))\n    : window.matchMedia('(prefers-color-scheme: dark)').matches;\n  applyTheme(darkMode);\n\n  if (darkModeToggle) {\n    darkModeToggle.addEventListener('click', () => {\n      darkMode = !darkMode;\n      localStorage.setItem('darkMode', JSON.stringify(darkMode));\n      applyTheme(darkMode);\n    });\n  }\n\n  // Toast Notification\n  const toastElement = document.getElementById('toast');\n  window.showToast = function(message, type = 'success') {\n    if (!toastElement) return;\n    \n    toastElement.textContent = message;\n    toastElement.classList.remove('bg-green-500', 'bg-red-500', 'opacity-0', 'translate-y-full');\n    toastElement.style.visibility = 'visible';\n\n    if (type === 'error') {\n      toastElement.classList.add('bg-red-500');\n    } else {\n      toastElement.classList.add('bg-green-500');\n    }\n    \n    toastElement.classList.add('opacity-100', 'translate-y-0');\n\n    setTimeout(() => {\n      toastElement.classList.remove('opacity-100', 'translate-y-0');\n      toastElement.classList.add('opacity-0', 'translate-y-full');\n      setTimeout(() => {\n         toastElement.style.visibility = 'hidden';\n      }, 500);\n    }, 3000);\n  };\n\n  // Cart Count Update\n  const cartCountBadge = document.getElementById('cart-count-badge');\n  window.updateCartCount = async function() {\n    if (!cartCountBadge) return;\n\n    try {\n      // Check login status first, as cart is user-specific\n      const authResponse = await fetch('/api/auth/status');\n      const authData = await authResponse.json();\n\n      if (authData.isLoggedIn) {\n        const cartResponse = await fetch('/api/cart');\n        if (cartResponse.ok) {\n          const cartItems = await cartResponse.json();\n          const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);\n          \n          if (totalItems > 0) {\n            cartCountBadge.textContent = totalItems;\n            cartCountBadge.style.display = 'flex'; // Ensure it's visible\n          } else {\n            cartCountBadge.style.display = 'none';\n          }\n        } else if (cartResponse.status === 401) { // Not logged in or session expired\n          cartCountBadge.style.display = 'none'; // Hide if not authenticated\n        } else {\n          // Other errors fetching cart (e.g., 500)\n          console.error('Failed to fetch cart for count:', cartResponse.status);\n          cartCountBadge.style.display = 'none'; // Optionally hide or show error state\n        }\n      } else {\n        // User is not logged in, cart count should be hidden or 0\n        cartCountBadge.style.display = 'none';\n      }\n    } catch (error) {\n      console.error('Error updating cart count:', error);\n      if (cartCountBadge) cartCountBadge.style.display = 'none'; // Hide on error\n    }\n  };\n  // updateCartCount(); // Initial call - will be called after auth UI update\n\n  // Current Year for Footer\n  const currentYearElement = document.getElementById('currentYear');\n  if (currentYearElement) {\n    currentYearElement.textContent = new Date().getFullYear();\n  }\n\n  // Mobile Menu Toggle\n  const mobileMenuButton = document.getElementById('mobileMenuButton');\n  const mobileMenu = document.getElementById('mobileMenu');\n  if (mobileMenuButton && mobileMenu) {\n    mobileMenuButton.addEventListener('click', () => {\n      mobileMenu.classList.toggle('hidden');\n    });\n    // Close menu if clicking outside (optional)\n    document.addEventListener('click', (event) => {\n        if (!mobileMenu.contains(event.target) && !mobileMenuButton.contains(event.target) && !mobileMenu.classList.contains('hidden')) {\n            mobileMenu.classList.add('hidden');\n        }\n    });\n  }\n  \n  // Sticky Category Navigation Bar\n  const categoryNav = document.getElementById('category-nav');\n  const mainHeader = document.getElementById('main-header');\n\n  if (categoryNav && mainHeader) {\n    const headerHeight = mainHeader.offsetHeight;\n    categoryNav.style.top = `${headerHeight}px`;\n\n    // Could add a class on scroll for subtle shadow if needed\n    // window.addEventListener('scroll', () => {\n    //   if (window.pageYOffset > headerHeight) {\n    //     categoryNav.classList.add('is-sticky');\n    //   } else {\n    //     categoryNav.classList.remove('is-sticky');\n    //   }\n    // });\n  }\n\n  // Authentication UI Update\n  const authContainer = document.getElementById('auth-container');\n  const loginLink = document.getElementById('login-link');\n  const registerLink = document.getElementById('register-link');\n  const userInfoDiv = document.getElementById('user-info');\n  const usernameDisplay = document.getElementById('username-display');\n  const logoutButton = document.getElementById('logout-button');\n  const accountLink = userInfoDiv ? userInfoDiv.querySelector('a[href=\"account.html\"]') : null; // More specific account link\n\n  async function updateAuthUI() {\n    if (!authContainer) { // If the auth container is not on the page, do nothing\n      // console.log('Auth container not found on this page.');\n      return;\n    }\n    try {\n      const response = await fetch('/api/auth/status');\n      if (!response.ok) { // Check if response is not OK (e.g. 404, 500)\n        console.error('Failed to fetch auth status:', response.status);\n        // Show default (logged out) state on error\n        if (loginLink) loginLink.style.display = 'inline';\n        if (registerLink) registerLink.style.display = 'inline';\n        if (userInfoDiv) userInfoDiv.classList.add('hidden');\n        return;\n      }\n      const data = await response.json();\n\n      if (data.isLoggedIn) {\n        if (loginLink) loginLink.style.display = 'none';\n        if (registerLink) registerLink.style.display = 'none';\n        if (userInfoDiv) {\n          userInfoDiv.classList.remove('hidden');\n          if (usernameDisplay) usernameDisplay.textContent = data.username || 'User';\n          if (accountLink) accountLink.style.display = 'inline'; // Ensure account link is visible\n        }\n        if (logoutButton) {\n          logoutButton.style.display = 'inline';\n          logoutButton.removeEventListener('click', handleLogout); // Remove previous listener to avoid duplicates\n          logoutButton.addEventListener('click', handleLogout);\n        }\n      } else {\n        if (loginLink) loginLink.style.display = 'inline';\n        if (registerLink) registerLink.style.display = 'inline';\n        if (userInfoDiv) userInfoDiv.classList.add('hidden');\n      }\n    } catch (error) {\n      console.error('Error updating auth UI:', error);\n      // Optionally show logged-out state as a fallback\n      if (loginLink) loginLink.style.display = 'inline';\n      if (registerLink) registerLink.style.display = 'inline';\n      if (userInfoDiv) userInfoDiv.classList.add('hidden');\n    }\n  }\n\n  async function handleLogout() {\n    try {\n      const response = await fetch('/api/auth/logout', { method: 'POST' });\n      const data = await response.json();\n      if (response.ok) {\n        showToast(data.message || '\u0110\u0103ng xu\u1EA5t th\u00E0nh c\u00F4ng!', 'success');\n        // No need to redirect here, updateAuthUI will handle UI changes.\n        // If redirect is desired: window.location.href = 'index.html';\n      } else {\n        showToast(data.message || '\u0110\u0103ng xu\u1EA5t th\u1EA5t b\u1EA1i.', 'error');\n      }\n    } catch (error) {\n      console.error('Error logging out:', error);\n      showToast('L\u1ED7i khi \u0111\u0103ng xu\u1EA5t.', 'error');\n    }\n    updateAuthUI(); // Refresh UI after logout attempt\n  }\n\n  // Initial call to set UI based on auth state\n  await updateAuthUI(); // Make sure auth UI is updated first\n  updateCartCount(); // Then update cart count based on login status\n\n});\n\n\n"],
  "mappings": "MAAA,SAAS,iBAAiB,mBAAoB,gBAAiB,CAE7D,IAAMA,EAAiB,SAAS,eAAe,gBAAgB,EACzDC,EAAW,SAAS,eAAe,wBAAwB,EAC3DC,EAAY,SAAS,eAAe,yBAAyB,EAE7DC,EAAcC,GAAW,CACzBA,GACF,SAAS,gBAAgB,UAAU,IAAI,MAAM,EACzCH,GAAUA,EAAS,UAAU,OAAO,QAAQ,EAC5CC,GAAWA,EAAU,UAAU,IAAI,QAAQ,IAE/C,SAAS,gBAAgB,UAAU,OAAO,MAAM,EAC5CD,GAAUA,EAAS,UAAU,IAAI,QAAQ,EACzCC,GAAWA,EAAU,UAAU,OAAO,QAAQ,EAEtD,EAGIG,EAAW,aAAa,QAAQ,UAAU,EAC1C,KAAK,MAAM,aAAa,QAAQ,UAAU,CAAC,EAC3C,OAAO,WAAW,8BAA8B,EAAE,QACtDF,EAAWE,CAAQ,EAEfL,GACFA,EAAe,iBAAiB,QAAS,IAAM,CAC7CK,EAAW,CAACA,EACZ,aAAa,QAAQ,WAAY,KAAK,UAAUA,CAAQ,CAAC,EACzDF,EAAWE,CAAQ,CACrB,CAAC,EAIH,IAAMC,EAAe,SAAS,eAAe,OAAO,EACpD,OAAO,UAAY,SAASC,EAASC,EAAO,UAAW,CAChDF,IAELA,EAAa,YAAcC,EAC3BD,EAAa,UAAU,OAAO,eAAgB,aAAc,YAAa,kBAAkB,EAC3FA,EAAa,MAAM,WAAa,UAE5BE,IAAS,QACXF,EAAa,UAAU,IAAI,YAAY,EAEvCA,EAAa,UAAU,IAAI,cAAc,EAG3CA,EAAa,UAAU,IAAI,cAAe,eAAe,EAEzD,WAAW,IAAM,CACfA,EAAa,UAAU,OAAO,cAAe,eAAe,EAC5DA,EAAa,UAAU,IAAI,YAAa,kBAAkB,EAC1D,WAAW,IAAM,CACdA,EAAa,MAAM,WAAa,QACnC,EAAG,GAAG,CACR,EAAG,GAAI,EACT,EAGA,IAAMG,EAAiB,SAAS,eAAe,kBAAkB,EACjE,OAAO,gBAAkB,gBAAiB,CACxC,GAAKA,EAEL,GAAI,CAKF,IAFiB,MADI,MAAM,MAAM,kBAAkB,GACf,KAAK,GAE5B,WAAY,CACvB,IAAMC,EAAe,MAAM,MAAM,WAAW,EAC5C,GAAIA,EAAa,GAAI,CAEnB,IAAMC,GADY,MAAMD,EAAa,KAAK,GACb,OAAO,CAACE,EAAKC,IAASD,EAAMC,EAAK,SAAU,CAAC,EAErEF,EAAa,GACfF,EAAe,YAAcE,EAC7BF,EAAe,MAAM,QAAU,QAE/BA,EAAe,MAAM,QAAU,MAEnC,MAAWC,EAAa,SAAW,KAIjC,QAAQ,MAAM,kCAAmCA,EAAa,MAAM,EACpED,EAAe,MAAM,QAAU,MAEnC,MAEEA,EAAe,MAAM,QAAU,MAEnC,OAASK,EAAO,CACd,QAAQ,MAAM,6BAA8BA,CAAK,EAC7CL,IAAgBA,EAAe,MAAM,QAAU,OACrD,CACF,EAIA,IAAMM,EAAqB,SAAS,eAAe,aAAa,EAC5DA,IACFA,EAAmB,YAAc,IAAI,KAAK,EAAE,YAAY,GAI1D,IAAMC,EAAmB,SAAS,eAAe,kBAAkB,EAC7DC,EAAa,SAAS,eAAe,YAAY,EACnDD,GAAoBC,IACtBD,EAAiB,iBAAiB,QAAS,IAAM,CAC/CC,EAAW,UAAU,OAAO,QAAQ,CACtC,CAAC,EAED,SAAS,iBAAiB,QAAUC,GAAU,CACtC,CAACD,EAAW,SAASC,EAAM,MAAM,GAAK,CAACF,EAAiB,SAASE,EAAM,MAAM,GAAK,CAACD,EAAW,UAAU,SAAS,QAAQ,GACzHA,EAAW,UAAU,IAAI,QAAQ,CAEzC,CAAC,GAIH,IAAME,EAAc,SAAS,eAAe,cAAc,EACpDC,EAAa,SAAS,eAAe,aAAa,EAExD,GAAID,GAAeC,EAAY,CAC7B,IAAMC,EAAeD,EAAW,aAChCD,EAAY,MAAM,IAAM,GAAGE,CAAY,IAUzC,CAGA,IAAMC,EAAgB,SAAS,eAAe,gBAAgB,EACxDC,EAAY,SAAS,eAAe,YAAY,EAChDC,EAAe,SAAS,eAAe,eAAe,EACtDC,EAAc,SAAS,eAAe,WAAW,EACjDC,EAAkB,SAAS,eAAe,kBAAkB,EAC5DC,EAAe,SAAS,eAAe,eAAe,EACtDC,EAAcH,EAAcA,EAAY,cAAc,wBAAwB,EAAI,KAExF,eAAeI,GAAe,CAC5B,GAAKP,EAIL,GAAI,CACF,IAAMQ,EAAW,MAAM,MAAM,kBAAkB,EAC/C,GAAI,CAACA,EAAS,GAAI,CAChB,QAAQ,MAAM,+BAAgCA,EAAS,MAAM,EAEzDP,IAAWA,EAAU,MAAM,QAAU,UACrCC,IAAcA,EAAa,MAAM,QAAU,UAC3CC,GAAaA,EAAY,UAAU,IAAI,QAAQ,EACnD,MACF,CACA,IAAMM,EAAO,MAAMD,EAAS,KAAK,EAE7BC,EAAK,YACHR,IAAWA,EAAU,MAAM,QAAU,QACrCC,IAAcA,EAAa,MAAM,QAAU,QAC3CC,IACFA,EAAY,UAAU,OAAO,QAAQ,EACjCC,IAAiBA,EAAgB,YAAcK,EAAK,UAAY,QAChEH,IAAaA,EAAY,MAAM,QAAU,WAE3CD,IACFA,EAAa,MAAM,QAAU,SAC7BA,EAAa,oBAAoB,QAASK,CAAY,EACtDL,EAAa,iBAAiB,QAASK,CAAY,KAGjDT,IAAWA,EAAU,MAAM,QAAU,UACrCC,IAAcA,EAAa,MAAM,QAAU,UAC3CC,GAAaA,EAAY,UAAU,IAAI,QAAQ,EAEvD,OAASX,EAAO,CACd,QAAQ,MAAM,0BAA2BA,CAAK,EAE1CS,IAAWA,EAAU,MAAM,QAAU,UACrCC,IAAcA,EAAa,MAAM,QAAU,UAC3CC,GAAaA,EAAY,UAAU,IAAI,QAAQ,CACrD,CACF,CAEA,eAAeO,GAAe,CAC5B,GAAI,CACF,IAAMF,EAAW,MAAM,MAAM,mBAAoB,CAAE,OAAQ,MAAO,CAAC,EAC7DC,EAAO,MAAMD,EAAS,KAAK,EAC7BA,EAAS,GACX,UAAUC,EAAK,SAAW,6CAAyB,SAAS,EAI5D,UAAUA,EAAK,SAAW,+CAAuB,OAAO,CAE5D,OAASjB,EAAO,CACd,QAAQ,MAAM,qBAAsBA,CAAK,EACzC,UAAU,yCAAsB,OAAO,CACzC,CACAe,EAAa,CACf,CAGA,MAAMA,EAAa,EACnB,gBAAgB,CAElB,CAAC",
  "names": ["darkModeToggle", "darkIcon", "lightIcon", "applyTheme", "isDark", "darkMode", "toastElement", "message", "type", "cartCountBadge", "cartResponse", "totalItems", "sum", "item", "error", "currentYearElement", "mobileMenuButton", "mobileMenu", "event", "categoryNav", "mainHeader", "headerHeight", "authContainer", "loginLink", "registerLink", "userInfoDiv", "usernameDisplay", "logoutButton", "accountLink", "updateAuthUI", "response", "data", "handleLogout"]
}
